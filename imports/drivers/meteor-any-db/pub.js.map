{
  "version": 3,
  "file": "pub.js",
  "sourceRoot": "",
  "sources": [
    "pub.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "{DB_KEY} = AnyDb # Spoofing a Mongo collection name to hack around DDP\n\ndebug = (->)\nif Meteor.settings.public?.log?.pub\n  debug = console.log.bind(console, 'pub')\n\n# flatten a deep object into fields separated with '.'\nobj2Fields = (obj={}) ->\n  dest = {}\n  for key, value of obj\n    if U.isPlainObject(value)\n      deeperFields = obj2Fields(value)\n      for k,v of deeperFields\n        dest[\"#{key}.#{k}\"] = v\n    else\n      dest[key] = R.clone(value)\n  return dest\n\nsalter = -> Random.hexString(10)\n\n# publish with the subscriptionId and the position\ncreateOrderedObserver = (pub, subId) ->\n  addedBefore: (id, fields={}, before) ->\n    U.set([DB_KEY, subId], \"#{salter()}.#{before}\", fields)\n    pub.added(DB_KEY, id, obj2Fields(fields))\n  movedBefore: (id, before) ->\n    fields = {}\n    U.set([DB_KEY, subId], \"#{salter()}.#{before}\", fields)\n    pub.changed(DB_KEY, id, obj2Fields(fields))\n  changed: (id, fields) ->\n    pub.changed(DB_KEY, id, fields)\n  removed: (id) ->\n    pub.removed(DB_KEY, id)\n\n# pubs[name][serialize(query)][subId] = refresh\nAnyDb.pubs = {}\n\nAnyDb.refresh = (name, queryCond) ->\n  if AnyDb.pubs[name]\n    queries =  Object.keys(AnyDb.pubs[name])\n      .map(U.deserialize)\n      .filter(queryCond)\n      .map(U.serialize)\n    debug 'refresh', name\n    queries.map (query) ->\n      # defer these updates so they dont block methods or subscriptions\n      U.mapObj AnyDb.pubs[name][query], (subId, sub) -> Meteor.defer -> sub.refresh()\n\nAnyDb.transform = (name, queryCond, xform) ->\n  if AnyDb.pubs[name]\n    queries =  Object.keys(AnyDb.pubs[name])\n      .map(U.deserialize)\n      .filter(queryCond)\n      .map(U.serialize)\n    debug 'transform', name\n    queries.map (query) ->\n      # defer these transforms so they dont block methods or subscriptions\n      U.mapObj AnyDb.pubs[name][query], (subId, sub) -> Meteor.defer -> sub.transform(xform)\n\nAnyDb.publish = (name, fetcher) ->\n  Meteor.publish name, (query) ->\n    # unblock this publication so others can be processed while waiting\n    # for HTTP requests so they arent fetched synchronously in order.\n    # Thanks again Arunoda!\n    this.unblock()\n    # subscribe undefined comes through as null and this is annoying when you\n    # want to refresh a publication matching undefined\n    if query is null then query = undefined\n\n    pub = this\n    subId = pub._subscriptionId\n\n    sub =\n      subId: subId\n      docs: []\n      name: name\n      query: query\n\n    # fetch documents\n    sub.fetch = -> fetcher.call(pub, query)\n    # observer which sends DDP messages through merge-box through\n    # the publication along with subId and position information.\n    sub.observer = createOrderedObserver(pub, subId)\n    # fetch document again, diff, and publish\n    sub.refresh = ->\n      lap = U.stopwatch()\n      debug('refreshing', name, subId)\n      newDocs = sub.fetch()\n      DiffSequence.diffQueryChanges(true, sub.docs, newDocs, sub.observer)\n      sub.docs = newDocs\n      debug('refreshed', name, subId, lap(), 's')\n    # transform data, rather than refresh if we know for sure what the change\n    # will be.\n    sub.transform = (xform)->\n      lap = U.stopwatch()\n      debug('transforming', name, subId)\n      newDocs = xform(R.clone(sub.data))\n      DiffSequence.diffQueryChanges(true, sub.docs, newDocs, sub.observer)\n      sub.docs = newDocs\n      debug('transformed', name, subId, lap(), 's')\n\n    do ->\n      lap = U.stopwatch()\n      debug('start', name, subId)\n      sub.docs = sub.fetch()\n      sub.docs.map (doc) ->\n        id = doc._id\n        fields = R.clone(doc)\n        delete fields._id\n        sub.observer.addedBefore(id, fields, null)\n      pub.ready()\n      debug('ready', name, subId, lap(), 's')\n\n    # register and unregister publication\n    key = U.serialize(query)\n    U.set [name, key, subId], sub, AnyDb.pubs\n    pub.onStop ->\n      debug('stop', name, subId)\n      U.unset [name, key, subId], AnyDb.pubs\n"
  ]
}